struct LPTokenContentROM
{
    Symbol0:string;
    Symbol1:string;
    ID:number;
}

struct LPTokenContentRAM 
{
    Amount0:number;
    Amount1:number;
    Liquidity:number;
    ClaimedFees:number;
}


token LP {
	import Runtime;
	import Time;
	import NFT;
	import Address;
	
	global _owner:address;
	global _changed:bool;
	
    const LP_SERIES: number = 1;
	property name:string = "Phantasma Liquidity Provider";
	property symbol:string = "LP";
	property isTransferable:bool = false;
	property isBurnable:bool = true;
	property decimals:number = 8;
    property isFinite:bool = false;
    property maxSupply:number = 0;
	property owner:address = _owner;

	nft LPNFT<LPTokenContentROM, LPTokenContentRAM> {
		property name:string {
			return "LP #" + _mintID;
		}

		property description:string {
			return "Liqudity for pool " + _ROM.Symbol0 + " / " + _ROM.Symbol1;
		}

		property imageURL:string {
			return "https://phantasma.io/img/lp.png";
		}

		property infoURL:string {
			return "https://phantasma.io/lp/" + _tokenID;
		}
	}

	constructor(contractOwner:address)	{
		_owner = contractOwner;
		_changed = false;
		NFT.createSeries(_owner, $THIS_SYMBOL, 0, 0, TokenSeries.Unique, LPNFT);
	}
	
	public Mint(from:address, rom:LPTokenContentROM, ram:LPTokenContentRAM ):number {
	    Runtime.expect(Runtime.isWitness(_owner), "witness failed");
	    local id : number = NFT.mint($THIS_ADDRESS, from, $THIS_SYMBOL, rom, ram, LP_SERIES);
	    return id;
	}
	
	public ChangeOwner(from:address){
	    Runtime.expect(!_changed, "Owner was already changed");
        Runtime.expect(Runtime.isWitness(_owner), "witness failed");
		Runtime.expect(Address.isSystem(from), "the new address is not a system address");
        _owner = from;
	    _changed = true;
	}
	
	public testContext(): string{
        local context:string = Runtime.context();
        local previousContext:string = Runtime.previousContext();
		return "c: " + context + " || p: " + previousContext;
	}
	
	trigger onUpgrade(from:address) 
    {
        throw "Not allowed to upgrade.";
		
        //Runtime.expect(Runtime.isWitness(_owner), "witness failed");
        //return;
    }
	
	trigger onMigrate(from:address, to:address) {
        Runtime.expect(!_changed, "Owner was already changed");
	    Runtime.expect(Runtime.isWitness(_owner), "witness failed");
		Runtime.expect(Address.isSystem(to), "the new address is not a system address");

		if (from == _owner) {
			_owner = to;
            _changed = true;
		}
	}
	
	trigger onMint(from:address, to:address, symbol:string, tokenID:number) 
    {
        local contractSymbol: string = $THIS_SYMBOL;
        Runtime.expect(symbol == contractSymbol, "invalid symbol");
        Runtime.expect(Runtime.isWitness(_owner), "witness failed");
        return;
    }
}