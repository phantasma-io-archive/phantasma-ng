// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Tendermint/proto/tendermint/abci/abci.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tendermint.Abci {
  public static partial class ABCIApplication
  {
    static readonly string __ServiceName = "tendermint.abci.ABCIApplication";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestEcho> __Marshaller_tendermint_abci_RequestEcho = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestEcho.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseEcho> __Marshaller_tendermint_abci_ResponseEcho = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseEcho.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestFlush> __Marshaller_tendermint_abci_RequestFlush = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestFlush.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseFlush> __Marshaller_tendermint_abci_ResponseFlush = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseFlush.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestInfo> __Marshaller_tendermint_abci_RequestInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestInfo.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseInfo> __Marshaller_tendermint_abci_ResponseInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseInfo.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestSetOption> __Marshaller_tendermint_abci_RequestSetOption = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestSetOption.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseSetOption> __Marshaller_tendermint_abci_ResponseSetOption = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseSetOption.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestDeliverTx> __Marshaller_tendermint_abci_RequestDeliverTx = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestDeliverTx.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseDeliverTx> __Marshaller_tendermint_abci_ResponseDeliverTx = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseDeliverTx.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestCheckTx> __Marshaller_tendermint_abci_RequestCheckTx = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestCheckTx.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseCheckTx> __Marshaller_tendermint_abci_ResponseCheckTx = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseCheckTx.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestQuery> __Marshaller_tendermint_abci_RequestQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestQuery.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseQuery> __Marshaller_tendermint_abci_ResponseQuery = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseQuery.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestCommit> __Marshaller_tendermint_abci_RequestCommit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestCommit.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseCommit> __Marshaller_tendermint_abci_ResponseCommit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseCommit.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestInitChain> __Marshaller_tendermint_abci_RequestInitChain = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestInitChain.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseInitChain> __Marshaller_tendermint_abci_ResponseInitChain = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseInitChain.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestBeginBlock> __Marshaller_tendermint_abci_RequestBeginBlock = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestBeginBlock.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseBeginBlock> __Marshaller_tendermint_abci_ResponseBeginBlock = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseBeginBlock.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestEndBlock> __Marshaller_tendermint_abci_RequestEndBlock = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestEndBlock.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseEndBlock> __Marshaller_tendermint_abci_ResponseEndBlock = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseEndBlock.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestListSnapshots> __Marshaller_tendermint_abci_RequestListSnapshots = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestListSnapshots.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseListSnapshots> __Marshaller_tendermint_abci_ResponseListSnapshots = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseListSnapshots.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestOfferSnapshot> __Marshaller_tendermint_abci_RequestOfferSnapshot = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestOfferSnapshot.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseOfferSnapshot> __Marshaller_tendermint_abci_ResponseOfferSnapshot = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseOfferSnapshot.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestLoadSnapshotChunk> __Marshaller_tendermint_abci_RequestLoadSnapshotChunk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestLoadSnapshotChunk.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseLoadSnapshotChunk> __Marshaller_tendermint_abci_ResponseLoadSnapshotChunk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseLoadSnapshotChunk.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.RequestApplySnapshotChunk> __Marshaller_tendermint_abci_RequestApplySnapshotChunk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.RequestApplySnapshotChunk.Parser));
    static readonly grpc::Marshaller<global::Tendermint.Abci.ResponseApplySnapshotChunk> __Marshaller_tendermint_abci_ResponseApplySnapshotChunk = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Tendermint.Abci.ResponseApplySnapshotChunk.Parser));

    static readonly grpc::Method<global::Tendermint.Abci.RequestEcho, global::Tendermint.Abci.ResponseEcho> __Method_Echo = new grpc::Method<global::Tendermint.Abci.RequestEcho, global::Tendermint.Abci.ResponseEcho>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Echo",
        __Marshaller_tendermint_abci_RequestEcho,
        __Marshaller_tendermint_abci_ResponseEcho);

    static readonly grpc::Method<global::Tendermint.Abci.RequestFlush, global::Tendermint.Abci.ResponseFlush> __Method_Flush = new grpc::Method<global::Tendermint.Abci.RequestFlush, global::Tendermint.Abci.ResponseFlush>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Flush",
        __Marshaller_tendermint_abci_RequestFlush,
        __Marshaller_tendermint_abci_ResponseFlush);

    static readonly grpc::Method<global::Tendermint.Abci.RequestInfo, global::Tendermint.Abci.ResponseInfo> __Method_Info = new grpc::Method<global::Tendermint.Abci.RequestInfo, global::Tendermint.Abci.ResponseInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Info",
        __Marshaller_tendermint_abci_RequestInfo,
        __Marshaller_tendermint_abci_ResponseInfo);

    static readonly grpc::Method<global::Tendermint.Abci.RequestSetOption, global::Tendermint.Abci.ResponseSetOption> __Method_SetOption = new grpc::Method<global::Tendermint.Abci.RequestSetOption, global::Tendermint.Abci.ResponseSetOption>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetOption",
        __Marshaller_tendermint_abci_RequestSetOption,
        __Marshaller_tendermint_abci_ResponseSetOption);

    static readonly grpc::Method<global::Tendermint.Abci.RequestDeliverTx, global::Tendermint.Abci.ResponseDeliverTx> __Method_DeliverTx = new grpc::Method<global::Tendermint.Abci.RequestDeliverTx, global::Tendermint.Abci.ResponseDeliverTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeliverTx",
        __Marshaller_tendermint_abci_RequestDeliverTx,
        __Marshaller_tendermint_abci_ResponseDeliverTx);

    static readonly grpc::Method<global::Tendermint.Abci.RequestCheckTx, global::Tendermint.Abci.ResponseCheckTx> __Method_CheckTx = new grpc::Method<global::Tendermint.Abci.RequestCheckTx, global::Tendermint.Abci.ResponseCheckTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckTx",
        __Marshaller_tendermint_abci_RequestCheckTx,
        __Marshaller_tendermint_abci_ResponseCheckTx);

    static readonly grpc::Method<global::Tendermint.Abci.RequestQuery, global::Tendermint.Abci.ResponseQuery> __Method_Query = new grpc::Method<global::Tendermint.Abci.RequestQuery, global::Tendermint.Abci.ResponseQuery>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Query",
        __Marshaller_tendermint_abci_RequestQuery,
        __Marshaller_tendermint_abci_ResponseQuery);

    static readonly grpc::Method<global::Tendermint.Abci.RequestCommit, global::Tendermint.Abci.ResponseCommit> __Method_Commit = new grpc::Method<global::Tendermint.Abci.RequestCommit, global::Tendermint.Abci.ResponseCommit>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_tendermint_abci_RequestCommit,
        __Marshaller_tendermint_abci_ResponseCommit);

    static readonly grpc::Method<global::Tendermint.Abci.RequestInitChain, global::Tendermint.Abci.ResponseInitChain> __Method_InitChain = new grpc::Method<global::Tendermint.Abci.RequestInitChain, global::Tendermint.Abci.ResponseInitChain>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitChain",
        __Marshaller_tendermint_abci_RequestInitChain,
        __Marshaller_tendermint_abci_ResponseInitChain);

    static readonly grpc::Method<global::Tendermint.Abci.RequestBeginBlock, global::Tendermint.Abci.ResponseBeginBlock> __Method_BeginBlock = new grpc::Method<global::Tendermint.Abci.RequestBeginBlock, global::Tendermint.Abci.ResponseBeginBlock>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginBlock",
        __Marshaller_tendermint_abci_RequestBeginBlock,
        __Marshaller_tendermint_abci_ResponseBeginBlock);

    static readonly grpc::Method<global::Tendermint.Abci.RequestEndBlock, global::Tendermint.Abci.ResponseEndBlock> __Method_EndBlock = new grpc::Method<global::Tendermint.Abci.RequestEndBlock, global::Tendermint.Abci.ResponseEndBlock>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndBlock",
        __Marshaller_tendermint_abci_RequestEndBlock,
        __Marshaller_tendermint_abci_ResponseEndBlock);

    static readonly grpc::Method<global::Tendermint.Abci.RequestListSnapshots, global::Tendermint.Abci.ResponseListSnapshots> __Method_ListSnapshots = new grpc::Method<global::Tendermint.Abci.RequestListSnapshots, global::Tendermint.Abci.ResponseListSnapshots>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSnapshots",
        __Marshaller_tendermint_abci_RequestListSnapshots,
        __Marshaller_tendermint_abci_ResponseListSnapshots);

    static readonly grpc::Method<global::Tendermint.Abci.RequestOfferSnapshot, global::Tendermint.Abci.ResponseOfferSnapshot> __Method_OfferSnapshot = new grpc::Method<global::Tendermint.Abci.RequestOfferSnapshot, global::Tendermint.Abci.ResponseOfferSnapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OfferSnapshot",
        __Marshaller_tendermint_abci_RequestOfferSnapshot,
        __Marshaller_tendermint_abci_ResponseOfferSnapshot);

    static readonly grpc::Method<global::Tendermint.Abci.RequestLoadSnapshotChunk, global::Tendermint.Abci.ResponseLoadSnapshotChunk> __Method_LoadSnapshotChunk = new grpc::Method<global::Tendermint.Abci.RequestLoadSnapshotChunk, global::Tendermint.Abci.ResponseLoadSnapshotChunk>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadSnapshotChunk",
        __Marshaller_tendermint_abci_RequestLoadSnapshotChunk,
        __Marshaller_tendermint_abci_ResponseLoadSnapshotChunk);

    static readonly grpc::Method<global::Tendermint.Abci.RequestApplySnapshotChunk, global::Tendermint.Abci.ResponseApplySnapshotChunk> __Method_ApplySnapshotChunk = new grpc::Method<global::Tendermint.Abci.RequestApplySnapshotChunk, global::Tendermint.Abci.ResponseApplySnapshotChunk>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApplySnapshotChunk",
        __Marshaller_tendermint_abci_RequestApplySnapshotChunk,
        __Marshaller_tendermint_abci_ResponseApplySnapshotChunk);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tendermint.Abci.AbciReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ABCIApplication</summary>
    [grpc::BindServiceMethod(typeof(ABCIApplication), "BindService")]
    public abstract partial class ABCIApplicationBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseEcho> Echo(global::Tendermint.Abci.RequestEcho request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseFlush> Flush(global::Tendermint.Abci.RequestFlush request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseInfo> Info(global::Tendermint.Abci.RequestInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseSetOption> SetOption(global::Tendermint.Abci.RequestSetOption request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseDeliverTx> DeliverTx(global::Tendermint.Abci.RequestDeliverTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseCheckTx> CheckTx(global::Tendermint.Abci.RequestCheckTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseQuery> Query(global::Tendermint.Abci.RequestQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseCommit> Commit(global::Tendermint.Abci.RequestCommit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseInitChain> InitChain(global::Tendermint.Abci.RequestInitChain request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseBeginBlock> BeginBlock(global::Tendermint.Abci.RequestBeginBlock request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseEndBlock> EndBlock(global::Tendermint.Abci.RequestEndBlock request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseListSnapshots> ListSnapshots(global::Tendermint.Abci.RequestListSnapshots request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseOfferSnapshot> OfferSnapshot(global::Tendermint.Abci.RequestOfferSnapshot request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseLoadSnapshotChunk> LoadSnapshotChunk(global::Tendermint.Abci.RequestLoadSnapshotChunk request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tendermint.Abci.ResponseApplySnapshotChunk> ApplySnapshotChunk(global::Tendermint.Abci.RequestApplySnapshotChunk request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ABCIApplication</summary>
    public partial class ABCIApplicationClient : grpc::ClientBase<ABCIApplicationClient>
    {
      /// <summary>Creates a new client for ABCIApplication</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ABCIApplicationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ABCIApplication that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ABCIApplicationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ABCIApplicationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ABCIApplicationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tendermint.Abci.ResponseEcho Echo(global::Tendermint.Abci.RequestEcho request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Echo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseEcho Echo(global::Tendermint.Abci.RequestEcho request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Echo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseEcho> EchoAsync(global::Tendermint.Abci.RequestEcho request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseEcho> EchoAsync(global::Tendermint.Abci.RequestEcho request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Echo, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseFlush Flush(global::Tendermint.Abci.RequestFlush request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Flush(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseFlush Flush(global::Tendermint.Abci.RequestFlush request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Flush, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseFlush> FlushAsync(global::Tendermint.Abci.RequestFlush request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FlushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseFlush> FlushAsync(global::Tendermint.Abci.RequestFlush request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Flush, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseInfo Info(global::Tendermint.Abci.RequestInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Info(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseInfo Info(global::Tendermint.Abci.RequestInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Info, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseInfo> InfoAsync(global::Tendermint.Abci.RequestInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseInfo> InfoAsync(global::Tendermint.Abci.RequestInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Info, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseSetOption SetOption(global::Tendermint.Abci.RequestSetOption request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetOption(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseSetOption SetOption(global::Tendermint.Abci.RequestSetOption request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetOption, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseSetOption> SetOptionAsync(global::Tendermint.Abci.RequestSetOption request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetOptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseSetOption> SetOptionAsync(global::Tendermint.Abci.RequestSetOption request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetOption, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseDeliverTx DeliverTx(global::Tendermint.Abci.RequestDeliverTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeliverTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseDeliverTx DeliverTx(global::Tendermint.Abci.RequestDeliverTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeliverTx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseDeliverTx> DeliverTxAsync(global::Tendermint.Abci.RequestDeliverTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeliverTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseDeliverTx> DeliverTxAsync(global::Tendermint.Abci.RequestDeliverTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeliverTx, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseCheckTx CheckTx(global::Tendermint.Abci.RequestCheckTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseCheckTx CheckTx(global::Tendermint.Abci.RequestCheckTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckTx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseCheckTx> CheckTxAsync(global::Tendermint.Abci.RequestCheckTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseCheckTx> CheckTxAsync(global::Tendermint.Abci.RequestCheckTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckTx, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseQuery Query(global::Tendermint.Abci.RequestQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Query(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseQuery Query(global::Tendermint.Abci.RequestQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Query, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseQuery> QueryAsync(global::Tendermint.Abci.RequestQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseQuery> QueryAsync(global::Tendermint.Abci.RequestQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Query, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseCommit Commit(global::Tendermint.Abci.RequestCommit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Commit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseCommit Commit(global::Tendermint.Abci.RequestCommit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Commit, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseCommit> CommitAsync(global::Tendermint.Abci.RequestCommit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseCommit> CommitAsync(global::Tendermint.Abci.RequestCommit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Commit, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseInitChain InitChain(global::Tendermint.Abci.RequestInitChain request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitChain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseInitChain InitChain(global::Tendermint.Abci.RequestInitChain request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitChain, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseInitChain> InitChainAsync(global::Tendermint.Abci.RequestInitChain request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitChainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseInitChain> InitChainAsync(global::Tendermint.Abci.RequestInitChain request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitChain, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseBeginBlock BeginBlock(global::Tendermint.Abci.RequestBeginBlock request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseBeginBlock BeginBlock(global::Tendermint.Abci.RequestBeginBlock request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseBeginBlock> BeginBlockAsync(global::Tendermint.Abci.RequestBeginBlock request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseBeginBlock> BeginBlockAsync(global::Tendermint.Abci.RequestBeginBlock request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginBlock, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseEndBlock EndBlock(global::Tendermint.Abci.RequestEndBlock request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseEndBlock EndBlock(global::Tendermint.Abci.RequestEndBlock request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseEndBlock> EndBlockAsync(global::Tendermint.Abci.RequestEndBlock request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseEndBlock> EndBlockAsync(global::Tendermint.Abci.RequestEndBlock request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndBlock, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseListSnapshots ListSnapshots(global::Tendermint.Abci.RequestListSnapshots request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseListSnapshots ListSnapshots(global::Tendermint.Abci.RequestListSnapshots request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseListSnapshots> ListSnapshotsAsync(global::Tendermint.Abci.RequestListSnapshots request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseListSnapshots> ListSnapshotsAsync(global::Tendermint.Abci.RequestListSnapshots request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseOfferSnapshot OfferSnapshot(global::Tendermint.Abci.RequestOfferSnapshot request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OfferSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseOfferSnapshot OfferSnapshot(global::Tendermint.Abci.RequestOfferSnapshot request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OfferSnapshot, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseOfferSnapshot> OfferSnapshotAsync(global::Tendermint.Abci.RequestOfferSnapshot request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OfferSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseOfferSnapshot> OfferSnapshotAsync(global::Tendermint.Abci.RequestOfferSnapshot request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OfferSnapshot, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseLoadSnapshotChunk LoadSnapshotChunk(global::Tendermint.Abci.RequestLoadSnapshotChunk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSnapshotChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseLoadSnapshotChunk LoadSnapshotChunk(global::Tendermint.Abci.RequestLoadSnapshotChunk request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadSnapshotChunk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseLoadSnapshotChunk> LoadSnapshotChunkAsync(global::Tendermint.Abci.RequestLoadSnapshotChunk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSnapshotChunkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseLoadSnapshotChunk> LoadSnapshotChunkAsync(global::Tendermint.Abci.RequestLoadSnapshotChunk request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadSnapshotChunk, null, options, request);
      }
      public virtual global::Tendermint.Abci.ResponseApplySnapshotChunk ApplySnapshotChunk(global::Tendermint.Abci.RequestApplySnapshotChunk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplySnapshotChunk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tendermint.Abci.ResponseApplySnapshotChunk ApplySnapshotChunk(global::Tendermint.Abci.RequestApplySnapshotChunk request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApplySnapshotChunk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseApplySnapshotChunk> ApplySnapshotChunkAsync(global::Tendermint.Abci.RequestApplySnapshotChunk request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApplySnapshotChunkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tendermint.Abci.ResponseApplySnapshotChunk> ApplySnapshotChunkAsync(global::Tendermint.Abci.RequestApplySnapshotChunk request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApplySnapshotChunk, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ABCIApplicationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ABCIApplicationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ABCIApplicationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Echo, serviceImpl.Echo)
          .AddMethod(__Method_Flush, serviceImpl.Flush)
          .AddMethod(__Method_Info, serviceImpl.Info)
          .AddMethod(__Method_SetOption, serviceImpl.SetOption)
          .AddMethod(__Method_DeliverTx, serviceImpl.DeliverTx)
          .AddMethod(__Method_CheckTx, serviceImpl.CheckTx)
          .AddMethod(__Method_Query, serviceImpl.Query)
          .AddMethod(__Method_Commit, serviceImpl.Commit)
          .AddMethod(__Method_InitChain, serviceImpl.InitChain)
          .AddMethod(__Method_BeginBlock, serviceImpl.BeginBlock)
          .AddMethod(__Method_EndBlock, serviceImpl.EndBlock)
          .AddMethod(__Method_ListSnapshots, serviceImpl.ListSnapshots)
          .AddMethod(__Method_OfferSnapshot, serviceImpl.OfferSnapshot)
          .AddMethod(__Method_LoadSnapshotChunk, serviceImpl.LoadSnapshotChunk)
          .AddMethod(__Method_ApplySnapshotChunk, serviceImpl.ApplySnapshotChunk).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ABCIApplicationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Echo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestEcho, global::Tendermint.Abci.ResponseEcho>(serviceImpl.Echo));
      serviceBinder.AddMethod(__Method_Flush, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestFlush, global::Tendermint.Abci.ResponseFlush>(serviceImpl.Flush));
      serviceBinder.AddMethod(__Method_Info, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestInfo, global::Tendermint.Abci.ResponseInfo>(serviceImpl.Info));
      serviceBinder.AddMethod(__Method_SetOption, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestSetOption, global::Tendermint.Abci.ResponseSetOption>(serviceImpl.SetOption));
      serviceBinder.AddMethod(__Method_DeliverTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestDeliverTx, global::Tendermint.Abci.ResponseDeliverTx>(serviceImpl.DeliverTx));
      serviceBinder.AddMethod(__Method_CheckTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestCheckTx, global::Tendermint.Abci.ResponseCheckTx>(serviceImpl.CheckTx));
      serviceBinder.AddMethod(__Method_Query, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestQuery, global::Tendermint.Abci.ResponseQuery>(serviceImpl.Query));
      serviceBinder.AddMethod(__Method_Commit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestCommit, global::Tendermint.Abci.ResponseCommit>(serviceImpl.Commit));
      serviceBinder.AddMethod(__Method_InitChain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestInitChain, global::Tendermint.Abci.ResponseInitChain>(serviceImpl.InitChain));
      serviceBinder.AddMethod(__Method_BeginBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestBeginBlock, global::Tendermint.Abci.ResponseBeginBlock>(serviceImpl.BeginBlock));
      serviceBinder.AddMethod(__Method_EndBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestEndBlock, global::Tendermint.Abci.ResponseEndBlock>(serviceImpl.EndBlock));
      serviceBinder.AddMethod(__Method_ListSnapshots, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestListSnapshots, global::Tendermint.Abci.ResponseListSnapshots>(serviceImpl.ListSnapshots));
      serviceBinder.AddMethod(__Method_OfferSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestOfferSnapshot, global::Tendermint.Abci.ResponseOfferSnapshot>(serviceImpl.OfferSnapshot));
      serviceBinder.AddMethod(__Method_LoadSnapshotChunk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestLoadSnapshotChunk, global::Tendermint.Abci.ResponseLoadSnapshotChunk>(serviceImpl.LoadSnapshotChunk));
      serviceBinder.AddMethod(__Method_ApplySnapshotChunk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tendermint.Abci.RequestApplySnapshotChunk, global::Tendermint.Abci.ResponseApplySnapshotChunk>(serviceImpl.ApplySnapshotChunk));
    }

  }
}
#endregion
